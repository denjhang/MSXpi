; A template driver section
; (C) 1992-2005 by Ultrasoft
;
; By:   Arjen Zeilemaker
;
; Version:      0.90


; symbols which can be used from the kernel

; GETSLT    get my slotid
; DIV16     divide
; GETWRK    get my workarea
; SETINT    install my interrupt handler
; PRVINT    call orginal interrupt handler
; PROMPT    prompt for phantom drive
; RAWFLG    verify flag
; $SECBUF   temporary sectorbuffer
; XFER      transfer to TPA
; DISINT    inform interrupts are being disabled
; ENAINT    inform interrupts are being enabled
; PROCNM    CALL statement name

; symbols which must be defined by the driver

; INIHRD    initialize diskdriver hardware
; DRIVES    how many drives are connected
; INIENV    initialize diskdriver workarea
; DSKIO     diskdriver sector i/o
; DSKCHG    diskdriver diskchange status
; GETDPB    build Drive Parameter Block
; CHOICE    get format choice string
; DSKFMT    format disk
; MTOFF     stop diskmotor
; OEMSTA    diskdriver special call statements

; MYSIZE    size of diskdriver workarea
; SECLEN    size of biggest sector supported by the diskdriver
; DEFDPB    pointer to a default Drive Parameter Block


; errorcodes used by DSKIO, DSKCHG and GETDPB
;
; 0 write protect error
; 2 not ready error
; 4 data (crc) error
; 6 seek error
; 8 record not found error
; 10    write fault error
; 12    other error

; errorcodes used by DSKFMT
;
; 0 write protect error
; 2 not ready error
; 4 data (crc) error
; 6 seek error
; 8 record not found error
; 10    write fault error
; 12    bad parameter
; 14    insufficient memory
; 16    other error


MYSIZE equ 0			; Size of environment
SECLEN equ 512			; Size of biggest sector

; INIHRD
;
; Input:    None
; Output:   None
; Changed:  AF,BC,DE,HL,IX,IY may be affected

INIHRD:
	ret

; DRIVES
;
; Input:    F   Zx set if to return physical drives
;           Zx reset if to return at least 2 drives, if only one
;             physical drive it becomes a phantom drive
; Output:   L   number of drives
; Changed:  F,HL,IX,IY may be affected
;
; Remark:   DOS1 does not handle L=0 correctly

DRIVES:				; 0x7df0=CMD(1)
	push af
	ld hl,7df0h
	ld (hl),1
WAIT_DRIVES:
	ld a,(hl)
	and a
	jp nz,WAIT_DRIVES
	ld a,(7df2h)
	ld l,a
	pop af
	ret

; INIENV
;
; Input:    None
; Output:   None
; Changed:  AF,BC,DE,HL,IX,IY may be affected
;
; Remark:   examples installs own interrupt handler, but this is NOT required.
;       depends on the hardware if this is needed.

INIENV:
	ret

; DSKIO
;
; Input:    A   Drivenumber
;       F   Cx reset for read
;           Cx set for write
;       B   number of sectors
;       C   Media descriptor
;       DE  logical sectornumber
;       HL  transferaddress
; Output:   F   Cx set for error
;           Cx reset for ok
;       A   if error, errorcode
;       B   --if error-- always, remaining sectors, if no error then 0
; Changed:  AF,BC,DE,HL,IX,IY may be affected

DSKIO:				; 0x7df0=CMD(4/5) 0x7df1=NUM 0x7df2-0x7df3=ED
	JP C,DSKIO_WRITE
DSKIO_READ:
	push bc
	push af
	push hl
	ld hl,7df1h
	ld (hl),a
	inc hl
	ld (hl),e
	inc hl
	ld (hl),d
	ld hl,7df0h
	ld (hl),4
WAIT_READ:
	ld a,(hl)
	and a
	jp nz,WAIT_READ
	pop hl

	; 転送先が裏に隠れているRAM領域かどうかをチェック
	LD A,H
	AND A			; transfer from 8000H-FFFFH ?
	JP M,READ_DIRECT	; yep, direct sector transfer
	CP 3EH			; transfer from 0000H-3DFFH ?
	JP C,READ_DIRECT	; yep, direct sector transfer
	pop af

	; MSXpiからSECBUFにコピー
	PUSH HL
	PUSH DE
	LD HL,7e00h
	LD DE,($SECBUF)
	LD BC,512
	LDIR
	POP DE
	POP HL

	; SECBUFから転送先にコピー
	PUSH HL
	PUSH DE
	LD DE,($SECBUF)
	EX DE,HL
	LD BC,512
	CALL XFER
	POP DE
	POP HL
READ_END:
	LD BC,512
	ADD HL,BC		; HL+=512
	inc de
	POP BC
	DEC B			; B--
	JP Z,DSKIO_EXIT
	JP DSKIO_READ
READ_DIRECT:
	pop af
	; MSXpiから転送先にコピー
	PUSH HL
	PUSH DE
	LD DE,7e00h
	EX DE,HL
	LD BC,512
	LDIR
	POP DE
	POP HL
	JP READ_END

DSKIO_WRITE:
	PUSH BC
	push af
	; 転送元が裏に隠れているRAM領域かどうかをチェック
	LD A,H
	AND A			; transfer from 8000H-FFFFH ?
	JP M,WRITE_DIRECT	; yep, direct sector transfer
	CP 3EH			; transfer from 0000H-3DFFH ?
	JP C,WRITE_DIRECT	; yep, direct sector transfer
	pop af

	; 転送元からSECBUFにコピー
	PUSH HL
	PUSH DE
	LD DE,($SECBUF)
	LD BC,512
	CALL XFER
	POP DE
	POP HL

	; SECBUFからMSXpiにコピー
	PUSH HL
	PUSH DE
	LD HL,($SECBUF)
	LD DE,7e00h
	LD BC,512
	LDIR
	POP DE
	POP HL
WRITE_END:
	push af
	push hl
	ld hl,7df1h
	ld (hl),a
	inc hl
	ld (hl),e
	inc hl
	ld (hl),d
	ld hl,7df0h
	ld (hl),5
WAIT_WRITE:
	ld a,(hl)
	and a
	jp nz,WAIT_WRITE
	pop hl
	pop af

	LD BC,512
	ADD HL,BC		; HL+=512
	inc de
	POP BC
	DEC B                   ; B--
	JP Z,DSKIO_EXIT
	JP DSKIO_WRITE
WRITE_DIRECT:
	pop af
	; 転送元からMSXpiにコピー
	PUSH HL
	PUSH DE
	LD DE,7e00h
	LD BC,512
	LDIR
	POP DE
	POP HL
	JP WRITE_END
DSKIO_EXIT:
	and a
	RET

; DSKCHG
;
; Input:    A   Drivenumber
;       B   0
;       C   Media descriptor
;       HL  pointer to DPB
; Output:   F   Cx set for error
;           Cx reset for ok
;       A   if error, errorcode
;       B   if no error, disk change status
;           01 disk unchanged
;           00 unknown
;           FF disk changed
; Changed:  AF,BC,DE,HL,IX,IY may be affected
; Remark:   DOS1 kernel expects the DPB updated when disk change status is unknown or changed
;       DOS2 kernel does not care if the DPB is updated or not

DSKCHG:					; 0x7df0=CMD(3) 0x7df1=NUM
	ld hl,7df1h
	ld (hl),a
	ld hl,7df0h
	ld (hl),3
WAIT_DSKCHG:
	ld a,(hl)
	and a
	jp nz,WAIT_DSKCHG
	ld a,(7df2h)
	ld b,a
	and a
	ret

; GETDPB
;
; Input:    A   Drivenumber
;       B   first byte of FAT
;       C   Media descriptor
;       HL  pointer to DPB
; Output:   [HL+1]
;       ..
;       [HL+18] updated
; Changed:  AF,BC,DE,HL,IX,IY may be affected

GETDPB:					; 0x7df0=CMD(2) 0x7df1=NUM 0x7df2=first byte of FAT
	push hl
	ld hl,7df1h
	ld (hl),a
	inc hl
	ld (hl),b
	ld hl,7df0h
	ld (hl),2
WAIT_GETDPB:
	ld a,(hl)
	and a
	jp nz,WAIT_GETDPB
	pop hl
	ex de,hl
	ld hl,7e00h
	inc de
	ld bc,18
	ldir
	ret

DEFDPB EQU $-1
	defb 0F9h	; Media F9
	defw 512	; 80 Tracks
	defb 0Fh	; 9 sectors
	defb 04h	; 2 sides
	defb 01h	; 3.5" 720 Kb
	defb 02h
	defw 1
	defb 2
	defb 112
	defw 14
	defw 714
	defb 3
	defw 7

; CHOICE
;
; Input:    None
; Output:   HL  pointer to choice string, 0 if no choice
; Changed:  AF,BC,DE,HL,IX,IY may be affected

CHOICE:
	ld hl,0
	ret

; DSKFMT
;
; Input:    A   choicecode (1-9)
;       D   drivenumber
;       HL  begin of workarea
;       BC  length of workarea
; Output:   F   Cx set for error
;           Cx reset for ok
;       A   if error, errorcode
; Changed:  AF,BC,DE,HL,IX,IY may be affected

DSKFMT:
	ld a,0
	scf
	ret

; OEMSTATEMENT
;
; Input:    HL  basicpointer
; Output:   F   Cx set if statement not recognized
;           Cx reset if statement is recognized
;       HL  basicpointer,   updated if recognized
;                   unchanged if not recognized
; Changed:  AF,BC,DE,HL,IX,IY may be affected

OEMSTA:
	scf
	ret

; MTOFF
;
; Input:    None
; Output:   None
; Changed:  AF,BC,DE,HL,IX,IY may be affected

MTOFF:
	ret
